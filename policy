data "aws_iam_policy_document" "full_policy" {
  # HTTPS only
  statement {
    sid     = "ForceHttps"
    effect  = "Deny"
    actions = ["s3:*"]
    resources = ["${data.aws_s3_bucket.target.arn}/*"]

    principals {
      type        = "*"
      identifiers = ["*"]
    }

    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }

  # Lambda access
  statement {
    sid     = "AllowLambdaNotifications"
    effect  = "Allow"
    actions = ["s3:PutBucketNotification"]
    resources = [data.aws_s3_bucket.target.arn]

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }

  # Cross-account access
  statement {
    sid     = "CrossAccountAccess"
    effect  = "Allow"
    actions = ["s3:GetObject", "s3:PutObject"]
    resources = [
      data.aws_s3_bucket.target.arn,
      "${data.aws_s3_bucket.target.arn}/*"
    ]

    principals {
      type        = "AWS"
      identifiers = var.cross_account_roles
    }
  }

  # Dynamic customer statements
  dynamic "statement" {
    for_each = local.customer_statements

    content {
      sid    = statement.value.sid
      effect = "Allow"

      principals {
        type        = "AWS"
        identifiers = statement.value.principals
      }

      actions   = statement.value.actions
      resources = statement.value.resources
    }
  }
}

resource "aws_s3_bucket_policy" "attach" {
  bucket = data.aws_s3_bucket.target.id
  policy = data.aws_iam_policy_document.full_policy.json
}


locals {
  customer_statements = {
    for customer, props in var.customer_access_map : customer => {
      sid       = "AllowS3Access-${customer}"
      principals = props.principals
      actions    = props.actions
      resources  = [
        for prefix in props.prefixes :
        "${data.aws_s3_bucket.target.arn}/${prefix}/*"
      ]
    }
  }
}


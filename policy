data "aws_s3_bucket" "target" {
  bucket = var.bucket_name
}

###############################
# 1. Static - HTTPS enforcement
###############################
data "aws_iam_policy_document" "https_only" {
  statement {
    sid    = "ForceHttps"
    effect = "Deny"

    principals {
      type        = "*"
      identifiers = ["*"]
    }

    actions = ["s3:*"]

    resources = ["${data.aws_s3_bucket.target.arn}/*"]

    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }
}

###############################
# 2. Static - Lambda Access
###############################
data "aws_iam_policy_document" "lambda_access" {
  statement {
    sid    = "AllowLambdaNotifications"
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }

    actions = ["s3:PutBucketNotification"]

    resources = [
      data.aws_s3_bucket.target.arn,
      "${data.aws_s3_bucket.target.arn}/*"
    ]
  }
}

###############################
# 3. Cross-account Roles
###############################
data "aws_iam_policy_document" "cross_roles" {
  statement {
    sid    = "CrossAccountAccess"
    effect = "Allow"

    principals {
      type        = "AWS"
      identifiers = var.cross_account_roles
    }

    actions = ["s3:GetObject", "s3:PutObject"]

    resources = [
      data.aws_s3_bucket.target.arn,
      "${data.aws_s3_bucket.target.arn}/*"
    ]
  }
}

###############################
# 4. Dynamic - Customer Access
###############################
data "aws_iam_policy_document" "customers" {
  for_each = var.customer_access_map

  statement {
    sid    = "AllowS3Access-${each.key}"
    effect = "Allow"

    principals {
      type        = "AWS"
      identifiers = each.value.principals
    }

    actions = each.value.actions

    resources = flatten([
      for prefix in each.value.prefixes :
      "${data.aws_s3_bucket.target.arn}/${prefix}/*"
    ])
  }
}

###############################
# 5. Merge All Documents
###############################
data "aws_iam_policy_document" "final" {
  source_json = jsonencode([
    jsondecode(data.aws_iam_policy_document.https_only.json),
    jsondecode(data.aws_iam_policy_document.lambda_access.json),
    jsondecode(data.aws_iam_policy_document.cross_roles.json),
    for doc in data.aws_iam_policy_document.customers : jsondecode(doc.value.json)
  ])
}

###############################
# 6. Attach to Bucket
###############################
resource "aws_s3_bucket_policy" "attach" {
  bucket = data.aws_s3_bucket.target.id
  policy = data.aws_iam_policy_document.final.json
}
